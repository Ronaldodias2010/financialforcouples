name: Deploy Application to GCP

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'terraform-gcp/**'
      - '.github/workflows/terraform-*.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod
          - staging

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  SERVICE_NAME: couples-financials
  ARTIFACT_REGISTRY: us-central1-docker.pkg.dev

jobs:
  # Skip se foi triggered por terraform workflow que falhou
  check-terraform:
    name: Check Terraform Status
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Terraform workflow succeeded or not from workflow_run
        run: echo "Terraform OK or manual trigger"
  
  test:
    needs: [check-terraform]
    if: github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success'
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run linting
        run: bun run lint || echo "Linting completed"

      - name: Run type check
        run: bun run type-check || npx tsc --noEmit || echo "Type check completed"

  build-and-deploy:
    name: Build and Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: [test]
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }}

      - name: Build Docker image
        run: |
          docker build \
            --tag ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}/app:${{ github.sha }} \
            --tag ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}/app:latest \
            --build-arg SUPABASE_URL=${{ secrets.SUPABASE_URL }} \
            .

      - name: Push Docker image to Artifact Registry
        run: |
          docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}/app:${{ github.sha }}
          docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}/app:latest

      - name: Deploy to Cloud Run
        run: |
          # Verificar se a service account existe
          SA_EXISTS=$(gcloud iam service-accounts list \
            --filter="email:${{ env.SERVICE_NAME }}-run-sa@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com" \
            --format="value(email)" || echo "")
          
          if [ -n "$SA_EXISTS" ]; then
            echo "‚úÖ Service account existe, usando: $SA_EXISTS"
            gcloud run deploy ${{ env.SERVICE_NAME }} \
              --image=${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}/app:${{ github.sha }} \
              --region=${{ env.GCP_REGION }} \
              --platform=managed \
              --allow-unauthenticated \
              --min-instances=0 \
              --max-instances=10 \
              --cpu=1 \
              --memory=512Mi \
              --timeout=300 \
              --set-env-vars="NODE_ENV=production,SUPABASE_URL=${{ secrets.SUPABASE_URL }}" \
              --set-secrets="SUPABASE_ANON_KEY=supabase-anon-key:latest,SUPABASE_SERVICE_ROLE_KEY=supabase-service-role-key:latest" \
              --service-account=${{ env.SERVICE_NAME }}-run-sa@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com
          else
            echo "‚ö†Ô∏è  Service account n√£o existe, usando compute default"
            gcloud run deploy ${{ env.SERVICE_NAME }} \
              --image=${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}/app:${{ github.sha }} \
              --region=${{ env.GCP_REGION }} \
              --platform=managed \
              --allow-unauthenticated \
              --min-instances=0 \
              --max-instances=10 \
              --cpu=1 \
              --memory=512Mi \
              --timeout=300 \
              --set-env-vars="NODE_ENV=production,SUPABASE_URL=${{ secrets.SUPABASE_URL }}" \
              --set-secrets="SUPABASE_ANON_KEY=supabase-anon-key:latest,SUPABASE_SERVICE_ROLE_KEY=supabase-service-role-key:latest"
          fi

      - name: Get Cloud Run URL
        id: get-url
        run: |
          URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.GCP_REGION }} \
            --format='value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "Cloud Run URL: $URL"

      - name: Invalidate CDN Cache (if exists)
        continue-on-error: true
        run: |
          gcloud compute url-maps invalidate-cdn-cache ${{ env.SERVICE_NAME }}-url-map \
            --path="/*" \
            --async

      - name: Deployment Summary
        run: |
          echo "### üöÄ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** ${{ env.SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ env.GCP_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}/app:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** ${{ steps.get-url.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  smoke-test:
    name: Smoke Test
    runs-on: ubuntu-latest
    needs: build-and-deploy
    steps:
      - name: Get Cloud Run URL
        id: get-url
        run: |
          URL=$(gcloud auth activate-service-account --key-file=<(echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}') && \
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }} && \
          gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.GCP_REGION }} \
            --format='value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Test application health
        run: |
          sleep 10
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.get-url.outputs.url }})
          if [ $HTTP_CODE -eq 200 ] || [ $HTTP_CODE -eq 301 ] || [ $HTTP_CODE -eq 302 ]; then
            echo "‚úÖ Application is healthy (HTTP $HTTP_CODE)"
          else
            echo "‚ùå Application health check failed (HTTP $HTTP_CODE)"
            exit 1
          fi

      - name: Test static assets
        continue-on-error: true
        run: |
          curl -f ${{ steps.get-url.outputs.url }}/favicon.ico || echo "Favicon test skipped"
