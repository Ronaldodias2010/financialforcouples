name: Terraform Apply

on:
  push:
    branches:
      - main
    paths:
      - 'terraform-gcp/**'
      - '.github/workflows/terraform-*.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod

env:
  TF_VERSION: '1.6.0'
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: 'us-central1'

jobs:
  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'prod' }}
    
    defaults:
      run:
        working-directory: terraform-gcp
    
    outputs:
      load_balancer_ip: ${{ steps.outputs.outputs.load_balancer_ip }}
      cloud_run_url: ${{ steps.outputs.outputs.cloud_run_url }}
      ssl_status: ${{ steps.outputs.outputs.ssl_status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      
      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Create terraform.tfvars
        run: |
          cat > terraform.tfvars <<EOF
          gcp_project_id = "${{ secrets.GCP_PROJECT_ID }}"
          gcp_region = "${{ env.GCP_REGION }}"
          environment = "prod"
          app_name = "couples-financials"
          
          domain_name = "${{ secrets.TF_VAR_domain_name }}"
          secondary_domain_name = "${{ secrets.TF_VAR_secondary_domain_name }}"
          
          supabase_url = "${{ secrets.SUPABASE_URL }}"
          supabase_anon_key = "${{ secrets.SUPABASE_ANON_KEY }}"
          supabase_service_role_key = "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}"
          
          container_image = "${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/couples-financials/app:latest"
          
          min_instances = 0
          max_instances = 10
          cpu = "1"
          memory = "512Mi"
          max_requests_per_container = 80
          
          enable_cdn = true
          cdn_cache_max_age = 3600
          
          artifact_registry_location = "${{ env.GCP_REGION }}"
          EOF
      
      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate
      
      - name: Terraform Plan
        id: plan
        run: terraform plan -out=tfplan -input=false
      
      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false tfplan
      
      - name: Capture Terraform Outputs
        id: outputs
        run: |
          echo "load_balancer_ip=$(terraform output -raw load_balancer_ip)" >> $GITHUB_OUTPUT
          echo "cloud_run_url=$(terraform output -raw cloud_run_url)" >> $GITHUB_OUTPUT
          echo "ssl_status=$(terraform output -raw ssl_certificate_status)" >> $GITHUB_OUTPUT
          
          # Save full outputs as JSON
          terraform output -json > terraform-outputs.json
      
      - name: Upload Terraform Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: terraform-gcp/terraform-outputs.json
          retention-days: 30
      
      - name: Display Deployment Info
        run: |
          echo "## 🚀 Terraform Apply Completed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Infrastructure Outputs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Resource | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Load Balancer IP | \`$(terraform output -raw load_balancer_ip)\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Cloud Run URL | $(terraform output -raw cloud_run_url) |" >> $GITHUB_STEP_SUMMARY
          echo "| SSL Certificate Status | \`$(terraform output -raw ssl_certificate_status)\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 DNS Configuration Required" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Configure the following A records in your DNS provider:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "Type: A" >> $GITHUB_STEP_SUMMARY
          echo "Name: @ (for ${{ secrets.TF_VAR_domain_name }})" >> $GITHUB_STEP_SUMMARY
          echo "Value: $(terraform output -raw load_balancer_ip)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Type: A" >> $GITHUB_STEP_SUMMARY
          echo "Name: @ (for ${{ secrets.TF_VAR_secondary_domain_name }})" >> $GITHUB_STEP_SUMMARY
          echo "Value: $(terraform output -raw load_balancer_ip)" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⏳ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. ✅ Configure DNS A records (see above)" >> $GITHUB_STEP_SUMMARY
          echo "2. ⏰ Wait for DNS propagation (15-30 minutes typically)" >> $GITHUB_STEP_SUMMARY
          echo "3. 🔒 Wait for SSL certificate provisioning (up to 15 minutes)" >> $GITHUB_STEP_SUMMARY
          echo "4. 🚀 Application will be deployed automatically after this workflow" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Verify DNS Propagation" >> $GITHUB_STEP_SUMMARY
          echo "Check at: https://dnschecker.org" >> $GITHUB_STEP_SUMMARY
      
      - name: Comment on Commit (if pushed)
        if: github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const lb_ip = '${{ steps.outputs.outputs.load_balancer_ip }}';
            const run_url = '${{ steps.outputs.outputs.cloud_run_url }}';
            const ssl_status = '${{ steps.outputs.outputs.ssl_status }}';
            
            const body = `## 🚀 Terraform Infrastructure Deployed
            
            ### Infrastructure Details
            - **Load Balancer IP**: \`${lb_ip}\`
            - **Cloud Run URL**: ${run_url}
            - **SSL Certificate**: \`${ssl_status}\`
            
            ### DNS Configuration Required
            Configure these A records in your DNS provider:
            
            \`\`\`
            ${{ secrets.TF_VAR_domain_name }}           A    ${lb_ip}
            ${{ secrets.TF_VAR_secondary_domain_name }} A    ${lb_ip}
            \`\`\`
            
            **Next**: Wait for DNS propagation, then SSL will be automatically provisioned.`;
            
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: body
            });
