name: Terraform Plan

on:
  pull_request:
    branches:
      - main
    paths:
      - 'terraform-gcp/**'
      - '.github/workflows/terraform-*.yml'

env:
  TF_VERSION: '1.6.0'
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: 'us-central1'

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: terraform-gcp
    
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      
      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Create terraform.tfvars
        run: |
          cat > terraform.tfvars <<EOF
          gcp_project_id = "${{ secrets.GCP_PROJECT_ID }}"
          gcp_region = "${{ env.GCP_REGION }}"
          environment = "prod"
          app_name = "couples-financials"
          
          domain_name = "${{ secrets.TF_VAR_domain_name }}"
          secondary_domain_name = "${{ secrets.TF_VAR_secondary_domain_name }}"
          
          supabase_url = "${{ secrets.SUPABASE_URL }}"
          supabase_anon_key = "${{ secrets.SUPABASE_ANON_KEY }}"
          supabase_service_role_key = "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}"
          
          container_image = "${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/couples-financials/app:latest"
          
          min_instances = 0
          max_instances = 10
          cpu = "1"
          memory = "512Mi"
          max_requests_per_container = 80
          
          enable_cdn = true
          cdn_cache_max_age = 3600
          
          artifact_registry_location = "${{ env.GCP_REGION }}"
          EOF
      
      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true
      
      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true
      
      - name: Comment PR with Plan
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
