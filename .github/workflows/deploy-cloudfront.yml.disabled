name: Deploy with CloudFront

on:
  workflow_dispatch:
    inputs:
      force_cloudfront:
        description: 'Force CloudFront deployment (requires available quota)'
        required: false
        default: 'true'
        type: boolean
      invalidate_cloudfront:
        description: 'Invalidate CloudFront cache after deployment'
        required: false
        default: 'true'
        type: boolean

concurrency:
  group: deploy-cloudfront-${{ github.ref }}
  cancel-in-progress: false

defaults:
  run:
    shell: bash

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: couples-financials
  ECS_SERVICE: couples-financials-service
  ECS_CLUSTER: couples-financials-cluster
  CONTAINER_NAME: couples-financials

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Build application
        run: npm run build

      - name: Validate build output
        run: |
          if [ ! -d "dist" ] || [ -z "$(ls -A dist)" ]; then
            echo "‚ùå Build failed - no dist directory or empty"
            exit 1
          fi
          echo "‚úÖ Build successful - dist directory contains files"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      image-tag: ${{ steps.image.outputs.image-tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        id: image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image-tag=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-infrastructure:
    needs: build-and-push
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      alb-dns: ${{ steps.terraform.outputs.alb-dns }}
      cloudfront-url: ${{ steps.terraform.outputs.cloudfront-url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.0
          terraform_wrapper: false

      - name: Deploy infrastructure with CloudFront
        id: terraform
        working-directory: terraform
        env:
          CONTAINER_IMAGE: ${{ needs.build-and-push.outputs.image-tag }}
          TF_VAR_supabase_anon_key: ${{ secrets.SUPABASE_ANON_KEY }}
          TF_VAR_supabase_service_role_key: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          TF_VAR_container_image: ${{ needs.build-and-push.outputs.image-tag }}
          TF_VAR_enable_cloudfront: true
        run: |
          terraform init
          terraform validate
          
          # Try with CloudFront first
          echo "üöÄ Attempting deployment with CloudFront enabled..."
          if terraform plan -var="enable_cloudfront=true" -out=tfplan; then
            terraform apply -auto-approve tfplan
            echo "‚úÖ CloudFront deployment successful!"
          else
            echo "‚ùå CloudFront deployment failed - likely quota exceeded"
            echo "üîÑ Retrying without CloudFront..."
            terraform plan -var="enable_cloudfront=false" -out=tfplan_nocdn
            terraform apply -auto-approve tfplan_nocdn
            echo "‚úÖ ALB-only deployment successful!"
          fi
          
          # Get outputs
          ALB_DNS=$(terraform output -raw alb_dns_name 2>/dev/null || echo "")
          CLOUDFRONT_URL=$(terraform output -raw cloudfront_domain_name 2>/dev/null || echo "")
          
          echo "alb-dns=$ALB_DNS" >> $GITHUB_OUTPUT
          echo "cloudfront-url=$CLOUDFRONT_URL" >> $GITHUB_OUTPUT

  deploy-application:
    needs: [build-and-push, deploy-infrastructure]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition $ECS_SERVICE \
            --query taskDefinition > task-definition.json

      - name: Update task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ needs.build-and-push.outputs.image-tag }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  post-deploy-tests:
    needs: [deploy-infrastructure, deploy-application]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Health check ALB
        run: |
          ALB_URL="https://${{ needs.deploy-infrastructure.outputs.alb-dns }}"
          echo "üè• Testing ALB health: $ALB_URL/health"
          
          for i in {1..5}; do
            if curl -f -s "$ALB_URL/health" > /dev/null; then
              echo "‚úÖ ALB health check passed"
              break
            else
              echo "‚è≥ ALB health check failed, retrying in 10s... ($i/5)"
              sleep 10
            fi
          done

      - name: Health check CloudFront (if enabled)
        if: ${{ needs.deploy-infrastructure.outputs.cloudfront-url != '' }}
        run: |
          CLOUDFRONT_URL="https://${{ needs.deploy-infrastructure.outputs.cloudfront-url }}"
          echo "üåê Testing CloudFront: $CLOUDFRONT_URL"
          
          for i in {1..3}; do
            if curl -f -s "$CLOUDFRONT_URL" > /dev/null; then
              echo "‚úÖ CloudFront health check passed"
              break
            else
              echo "‚è≥ CloudFront not ready, retrying in 30s... ($i/3)"
              sleep 30
            fi
          done

      - name: Invalidate CloudFront cache
        if: ${{ inputs.invalidate_cloudfront == true && needs.deploy-infrastructure.outputs.cloudfront-url != '' }}
        run: |
          DISTRIBUTION_ID=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?Comment=='couples-financials'].Id" \
            --output text)
          
          if [ -n "$DISTRIBUTION_ID" ] && [ "$DISTRIBUTION_ID" != "None" ]; then
            echo "üîÑ Invalidating CloudFront cache for distribution: $DISTRIBUTION_ID"
            aws cloudfront create-invalidation \
              --distribution-id $DISTRIBUTION_ID \
              --paths "/*"
            echo "‚úÖ CloudFront cache invalidation initiated"
          else
            echo "‚ÑπÔ∏è No CloudFront distribution found to invalidate"
          fi

      - name: Display deployment URLs
        run: |
          echo "üéâ Deployment completed!"
          echo ""
          echo "üìç Access URLs:"
          if [ -n "${{ needs.deploy-infrastructure.outputs.alb-dns }}" ]; then
            echo "üîó ALB (Direct): https://${{ needs.deploy-infrastructure.outputs.alb-dns }}"
          fi
          if [ -n "${{ needs.deploy-infrastructure.outputs.cloudfront-url }}" ]; then
            echo "üåê CloudFront: https://${{ needs.deploy-infrastructure.outputs.cloudfront-url }}"
          fi

  notify:
    needs: [test, build-and-push, deploy-infrastructure, deploy-application, post-deploy-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment result
        run: |
          if [ "${{ needs.post-deploy-tests.result }}" == "success" ]; then
            echo "‚úÖ CloudFront deployment completed successfully!"
          else
            echo "‚ùå CloudFront deployment failed. Check logs for details."
            exit 1
          fi