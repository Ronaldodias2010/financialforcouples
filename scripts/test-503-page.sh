#!/bin/bash

# Script para testar a p√°gina 503 localmente
# Uso: ./scripts/test-503-page.sh

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

test_503_page() {
    log_info "üß™ Testando p√°gina 503 customizada..."
    
    # Verificar se o arquivo existe
    if [ ! -f "public/503.html" ]; then
        log_error "‚ùå Arquivo public/503.html n√£o encontrado!"
        exit 1
    fi
    
    log_info "‚úÖ Arquivo 503.html encontrado"
    
    # Verificar conte√∫do b√°sico
    if grep -q "Couples Financials" public/503.html; then
        log_info "‚úÖ Conte√∫do da p√°gina cont√©m marca Couples Financials"
    else
        log_error "‚ùå P√°gina n√£o cont√©m marca Couples Financials"
        exit 1
    fi
    
    # Verificar suporte multil√≠ngue
    if grep -q "content-pt\|content-en\|content-es" public/503.html; then
        log_info "‚úÖ P√°gina tem suporte multil√≠ngue"
    else
        log_warn "‚ö†Ô∏è  P√°gina pode n√£o ter suporte multil√≠ngue completo"
    fi
    
    # Verificar fun√ß√£o de auto-retry
    if grep -q "setInterval" public/503.html; then
        log_info "‚úÖ P√°gina tem fun√ß√£o de auto-retry"
    else
        log_warn "‚ö†Ô∏è  P√°gina pode n√£o ter fun√ß√£o de auto-retry"
    fi
    
    log_info "üéâ Teste da p√°gina 503 conclu√≠do com sucesso!"
}

test_nginx_config() {
    log_info "üîß Testando configura√ß√µes do nginx..."
    
    # Verificar nginx.conf
    if [ -f "nginx.conf" ]; then
        if grep -q "error_page.*503" nginx.conf; then
            log_info "‚úÖ nginx.conf configurado para p√°gina 503 customizada"
        else
            log_warn "‚ö†Ô∏è  nginx.conf pode n√£o estar configurado para p√°gina 503"
        fi
    else
        log_error "‚ùå nginx.conf n√£o encontrado"
        exit 1
    fi
    
    # Verificar nginx-proxy.conf
    if [ -f "nginx-proxy.conf" ]; then
        if grep -q "error_page.*503" nginx-proxy.conf; then
            log_info "‚úÖ nginx-proxy.conf configurado para p√°gina 503 customizada"
        else
            log_warn "‚ö†Ô∏è  nginx-proxy.conf pode n√£o estar configurado para p√°gina 503"
        fi
    else
        log_warn "‚ö†Ô∏è  nginx-proxy.conf n√£o encontrado"
    fi
}

test_docker_config() {
    log_info "üê≥ Testando configura√ß√µes do Docker..."
    
    # Verificar Dockerfile
    if [ -f "Dockerfile" ]; then
        if grep -q "503.html" Dockerfile; then
            log_info "‚úÖ Dockerfile configurado para copiar p√°gina 503"
        else
            log_warn "‚ö†Ô∏è  Dockerfile pode n√£o copiar p√°gina 503"
        fi
    else
        log_error "‚ùå Dockerfile n√£o encontrado"
        exit 1
    fi
    
    # Verificar docker-compose.yml
    if [ -f "docker-compose.yml" ]; then
        if grep -q "503.html" docker-compose.yml; then
            log_info "‚úÖ docker-compose.yml configurado para montar p√°gina 503"
        else
            log_warn "‚ö†Ô∏è  docker-compose.yml pode n√£o montar p√°gina 503"
        fi
    else
        log_warn "‚ö†Ô∏è  docker-compose.yml n√£o encontrado"
    fi
}

simulate_503_locally() {
    log_info "üé≠ Simulando erro 503 localmente..."
    
    # Verificar se o Python est√° dispon√≠vel para servir arquivos
    if command -v python3 &> /dev/null; then
        log_info "Iniciando servidor local para testar p√°gina 503..."
        
        # Navegar para o diret√≥rio public
        cd public
        
        # Iniciar servidor Python simples em background
        python3 -m http.server 8000 > /dev/null 2>&1 &
        local server_pid=$!
        
        # Aguardar servidor iniciar
        sleep 2
        
        # Testar se a p√°gina est√° acess√≠vel
        if curl -f -s "http://localhost:8000/503.html" > /dev/null 2>&1; then
            log_info "‚úÖ P√°gina 503 acess√≠vel em http://localhost:8000/503.html"
            log_info "üåê Abra no navegador para ver o resultado"
            
            # Mostrar preview das primeiras linhas
            log_info "Preview da p√°gina:"
            curl -s "http://localhost:8000/503.html" | head -10 | grep -E "(title|h1)" || echo "Preview n√£o dispon√≠vel"
            
            # Manter servidor por 30 segundos
            log_info "Servidor ficar√° ativo por 30 segundos..."
            sleep 30
            
        else
            log_error "‚ùå N√£o foi poss√≠vel acessar a p√°gina 503"
        fi
        
        # Parar servidor
        kill $server_pid 2>/dev/null || true
        cd ..
        
    elif command -v python &> /dev/null; then
        log_info "Iniciando servidor local para testar p√°gina 503..."
        
        cd public
        python -m SimpleHTTPServer 8000 > /dev/null 2>&1 &
        local server_pid=$!
        
        sleep 2
        
        if curl -f -s "http://localhost:8000/503.html" > /dev/null 2>&1; then
            log_info "‚úÖ P√°gina 503 acess√≠vel em http://localhost:8000/503.html"
            sleep 30
        else
            log_error "‚ùå N√£o foi poss√≠vel acessar a p√°gina 503"
        fi
        
        kill $server_pid 2>/dev/null || true
        cd ..
        
    else
        log_warn "Python n√£o est√° dispon√≠vel. Instale Python para testar localmente."
        log_info "Alternativamente, abra public/503.html diretamente no navegador"
        
        # Tentar abrir no navegador se estiver no macOS/Linux
        if [[ "$OSTYPE" == "darwin"* ]]; then
            open "public/503.html"
        elif command -v xdg-open &> /dev/null; then
            xdg-open "public/503.html"
        fi
    fi
}

show_help() {
    echo "Script de teste para p√°gina 503 customizada"
    echo ""
    echo "Uso: $0 [op√ß√µes]"
    echo ""
    echo "Op√ß√µes:"
    echo "  --help          Mostrar esta ajuda"
    echo "  --page-only     Testar apenas a p√°gina 503"
    echo "  --config-only   Testar apenas configura√ß√µes"
    echo "  --serve         Servir p√°gina localmente para teste"
    echo "  --full          Teste completo (padr√£o)"
    echo ""
    echo "Exemplo:"
    echo "  $0              # Teste completo"
    echo "  $0 --serve      # Servir p√°gina para teste no navegador"
    echo ""
}

main() {
    local page_only=false
    local config_only=false
    local serve=false
    
    # Processar argumentos
    while [[ $# -gt 0 ]]; do
        case $1 in
            --help)
                show_help
                exit 0
                ;;
            --page-only)
                page_only=true
                shift
                ;;
            --config-only)
                config_only=true
                shift
                ;;
            --serve)
                serve=true
                shift
                ;;
            --full)
                # Padr√£o - n√£o precisa fazer nada
                shift
                ;;
            *)
                log_error "Op√ß√£o desconhecida: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    log_info "üöÄ Iniciando teste da p√°gina 503"
    
    if [ "$serve" = true ]; then
        simulate_503_locally
        exit 0
    fi
    
    if [ "$config_only" = false ]; then
        test_503_page
    fi
    
    if [ "$page_only" = false ]; then
        test_nginx_config
        test_docker_config
    fi
    
    log_info "‚úÖ Todos os testes conclu√≠dos!"
    log_info "üí° Para testar no navegador, execute: $0 --serve"
}

# Executar fun√ß√£o principal com todos os argumentos
main "$@"